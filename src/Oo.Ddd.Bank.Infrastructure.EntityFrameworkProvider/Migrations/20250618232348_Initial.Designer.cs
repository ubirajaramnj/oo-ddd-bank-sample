// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oo.Ddd.Bank.Infrastructure.EntityFrameworkProvider;

#nullable disable

namespace Oo.Ddd.Bank.Infrastructure.EntityFrameworkProvider.Migrations
{
    [DbContext(typeof(BankDbContext))]
    [Migration("20250618232348_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Agencia", b =>
                {
                    b.Property<int>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Numero"));

                    b.HasKey("Numero");

                    b.ToTable("Agencias", (string)null);
                });

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Conta", b =>
                {
                    b.Property<int>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Numero"));

                    b.Property<int?>("AgenciaNumero")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<double>("Saldo")
                        .HasColumnType("float");

                    b.HasKey("Numero");

                    b.HasIndex("AgenciaNumero");

                    b.HasIndex("ClienteId");

                    b.ToTable("Contas", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Documento", b =>
                {
                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Numero");

                    b.HasIndex("ClienteId");

                    b.ToTable("Documentos", (string)null);
                });

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Transacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ContaNumero")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Valor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ContaNumero");

                    b.ToTable("Transacoes", (string)null);
                });

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Especial", b =>
                {
                    b.HasBaseType("Oo.Ddd.Bank.Domain.Model.Conta");

                    b.Property<double>("Limite")
                        .HasColumnType("float");

                    b.ToTable("Especiais", (string)null);
                });

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Conta", b =>
                {
                    b.HasOne("Oo.Ddd.Bank.Domain.Model.Agencia", null)
                        .WithMany("Contas")
                        .HasForeignKey("AgenciaNumero");

                    b.HasOne("Oo.Ddd.Bank.Domain.Model.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Documento", b =>
                {
                    b.HasOne("Oo.Ddd.Bank.Domain.Model.Cliente", null)
                        .WithMany("Documentos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Transacao", b =>
                {
                    b.HasOne("Oo.Ddd.Bank.Domain.Model.Conta", null)
                        .WithMany("Transacoes")
                        .HasForeignKey("ContaNumero");
                });

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Especial", b =>
                {
                    b.HasOne("Oo.Ddd.Bank.Domain.Model.Conta", null)
                        .WithOne()
                        .HasForeignKey("Oo.Ddd.Bank.Domain.Model.Especial", "Numero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Agencia", b =>
                {
                    b.Navigation("Contas");
                });

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Cliente", b =>
                {
                    b.Navigation("Documentos");
                });

            modelBuilder.Entity("Oo.Ddd.Bank.Domain.Model.Conta", b =>
                {
                    b.Navigation("Transacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
